#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "mork.y".
#

require 'racc/parser.rb'



module Mork
  class Parser < Racc::Parser

module_eval(<<'...end mork.y/module_eval...', 'mork.y', 58)

require "mork/alias"
require "mork/raw/cell"
require "mork/dictionary"
require "mork/group"
require "mork/lexer"
require "mork/meta_alias"
require "mork/meta_table"
require "mork/raw"
require "mork/row"
require "mork/table"

attr_reader :lexer

def parse(str)
  @lexer = Mork::Lexer.new
  lexer.scan_setup(str)
  do_parse
end

def next_token
  lexer.next_token
end

...end mork.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    22,    22,    22,    22,     9,     2,    11,     3,    11,    58,
    59,    10,    13,    11,    35,    36,    35,    36,    31,    12,
    24,    24,    24,    24,    26,    26,    26,    26,     9,     9,
    58,    59,     9,     9,    37,    10,    10,    11,    11,    10,
    10,    11,    11,    12,    12,     9,     9,    12,    12,     9,
     9,    58,    59,    41,    11,    11,    24,    43,    11,    11,
    12,    12,    11,    26,    12,    12,    11,    45,    46,    52,
    35,    36,    53,    60,    35,    36,    61,    62,    63,    52,
    65,    66,    69,    70,    71,    72 ]

racc_action_check = [
     9,    19,    20,    21,     2,     0,    12,     1,    33,    36,
    36,     2,     3,     2,    12,    12,    33,    33,    11,     2,
     9,    19,    20,    21,     9,    19,    20,    21,     5,     6,
    58,    58,     7,     8,    18,     5,     6,     5,     6,     7,
     8,     7,     8,     5,     6,    10,    28,     7,     8,    29,
    30,    59,    59,    22,    10,    28,    23,    24,    29,    30,
    10,    28,    34,    25,    29,    30,    35,    26,    27,    31,
    34,    34,    32,    41,    35,    35,    43,    45,    50,    51,
    52,    57,    60,    61,    65,    69 ]

racc_action_pointer = [
     3,     7,     1,    12,   nil,    25,    26,    29,    30,    -5,
    42,     5,    -6,   nil,   nil,   nil,   nil,   nil,    30,    -4,
    -3,    -2,    47,    31,    31,    34,    37,    57,    43,    46,
    47,    54,    53,    -4,    50,    54,   -14,   nil,   nil,   nil,
   nil,    66,   nil,    49,   nil,    46,   nil,   nil,   nil,   nil,
    64,    64,    64,   nil,   nil,   nil,   nil,    59,     7,    28,
    74,    55,   nil,   nil,   nil,    67,   nil,   nil,   nil,    76,
   nil,   nil,   nil ]

racc_action_default = [
   -37,   -37,    -2,   -37,    -1,    -2,    -2,    -2,    -2,    -8,
   -14,   -37,   -23,    73,    -3,    -4,    -5,    -6,   -37,    -8,
    -8,    -8,   -37,   -31,   -37,   -34,   -37,   -37,   -14,   -14,
   -14,   -19,   -37,   -23,   -23,   -23,   -28,    -7,    -9,   -10,
   -11,   -37,   -32,   -37,   -35,   -37,   -13,   -15,   -16,   -17,
   -37,   -19,   -37,   -22,   -24,   -25,   -26,   -37,   -28,   -28,
   -37,   -37,   -36,   -18,   -20,   -37,   -27,   -29,   -30,   -37,
   -33,   -21,   -12 ]

racc_goto_table = [
    29,     1,    34,    44,    42,    32,     4,    57,   nil,    14,
    15,    16,    17,    28,   nil,   nil,    30,    50,    29,    29,
    29,    27,   nil,    34,    34,    34,    54,    55,    56,    67,
    68,    28,    28,    28,    30,    30,    30,    64,    18,    47,
    48,    49,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,
    40 ]

racc_goto_check = [
     5,     1,     5,     9,    10,    14,     2,    16,   nil,     2,
     2,     2,     2,     3,   nil,   nil,     6,    12,     5,     5,
     5,    11,   nil,     5,     5,     5,    14,    14,    14,    16,
    16,     3,     3,     3,     6,     6,     6,    12,     7,    11,
    11,    11,   nil,   nil,   nil,   nil,   nil,   nil,     7,     7,
     7 ]

racc_goto_pointer = [
   nil,     1,     4,     3,   nil,   -10,     6,    29,   nil,   -22,
   -19,    11,   -14,   nil,    -7,   nil,   -29,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     5,     6,     7,     8,   nil,    19,    20,
    21,   nil,   nil,    51,   nil,    33,   nil,    23,    25 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 33, :_reduce_1,
  0, 34, :_reduce_2,
  2, 34, :_reduce_3,
  2, 34, :_reduce_4,
  2, 34, :_reduce_5,
  2, 34, :_reduce_6,
  3, 35, :_reduce_7,
  0, 39, :_reduce_8,
  2, 39, :_reduce_9,
  2, 39, :_reduce_10,
  2, 39, :_reduce_11,
  5, 40, :_reduce_12,
  3, 36, :_reduce_13,
  0, 43, :_reduce_14,
  2, 43, :_reduce_15,
  2, 43, :_reduce_16,
  2, 43, :_reduce_17,
  4, 37, :_reduce_18,
  0, 44, :_reduce_none,
  2, 44, :_reduce_20,
  3, 45, :_reduce_21,
  3, 38, :_reduce_22,
  0, 46, :_reduce_23,
  2, 46, :_reduce_24,
  2, 46, :_reduce_25,
  2, 46, :_reduce_26,
  3, 47, :_reduce_27,
  0, 48, :_reduce_none,
  2, 48, :_reduce_none,
  2, 48, :_reduce_none,
  0, 42, :_reduce_none,
  2, 42, :_reduce_32,
  4, 49, :_reduce_33,
  0, 41, :_reduce_none,
  2, 41, :_reduce_none,
  3, 50, :_reduce_none ]

racc_reduce_n = 37

racc_shift_n = 73

racc_token_table = {
  false => 0,
  :error => 1,
  :magic => 2,
  :dictionary_in => 3,
  :dictionary_out => 4,
  :meta_in => 5,
  :meta_alias_in => 6,
  :meta_alias => 7,
  :meta_alias_out => 8,
  :meta_out => 9,
  :group_in => 10,
  :group_out => 11,
  :row_in => 12,
  :row_mid => 13,
  :row_out => 14,
  :cell_in => 15,
  :cell_value => 16,
  :cell_out => 17,
  :table_in => 18,
  :table_out => 19,
  :table_row_ref => 20,
  :meta_table_in => 21,
  :meta_table_out => 22,
  :meta_table_cell => 23,
  :meta_table_row_ref => 24,
  :alias_in => 25,
  :alias_key => 26,
  :alias_value => 27,
  :alias_out => 28,
  :comment_in => 29,
  :comment_text => 30,
  :comment_out => 31 }

racc_nt_base = 32

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "magic",
  "dictionary_in",
  "dictionary_out",
  "meta_in",
  "meta_alias_in",
  "meta_alias",
  "meta_alias_out",
  "meta_out",
  "group_in",
  "group_out",
  "row_in",
  "row_mid",
  "row_out",
  "cell_in",
  "cell_value",
  "cell_out",
  "table_in",
  "table_out",
  "table_row_ref",
  "meta_table_in",
  "meta_table_out",
  "meta_table_cell",
  "meta_table_row_ref",
  "alias_in",
  "alias_key",
  "alias_value",
  "alias_out",
  "comment_in",
  "comment_text",
  "comment_out",
  "$start",
  "start",
  "top_level",
  "dictionary",
  "group",
  "row",
  "table",
  "dictionary_contents",
  "meta",
  "comments",
  "aliases",
  "group_content",
  "cells",
  "cell",
  "table_content",
  "meta_table",
  "meta_table_content",
  "alias",
  "comment" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'mork.y', 8)
  def _reduce_1(val, _values, result)
     result = Mork::Raw.new(values: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 9)
  def _reduce_2(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 10)
  def _reduce_3(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 11)
  def _reduce_4(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 12)
  def _reduce_5(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 13)
  def _reduce_6(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 15)
  def _reduce_7(val, _values, result)
     result = Mork::Dictionary.new(content: val[1].flatten.compact)
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 16)
  def _reduce_8(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 17)
  def _reduce_9(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 19)
  def _reduce_10(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 20)
  def _reduce_11(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 21)
  def _reduce_12(val, _values, result)
     result = Mork::MetaAlias.new(raw: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 23)
  def _reduce_13(val, _values, result)
     result = Mork::Group.new(content: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 24)
  def _reduce_14(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 25)
  def _reduce_15(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 26)
  def _reduce_16(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 27)
  def _reduce_17(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 29)
  def _reduce_18(val, _values, result)
     result = Mork::Row.new(raw_id: val[1], cells: val[2])
    result
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'mork.y', 31)
  def _reduce_20(val, _values, result)
     result = val.flatten.compact
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 32)
  def _reduce_21(val, _values, result)
     result = Mork::Raw::Cell.new(raw: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 34)
  def _reduce_22(val, _values, result)
     result = Mork::Table.new(raw_id: val[0], content: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 35)
  def _reduce_23(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 36)
  def _reduce_24(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 37)
  def _reduce_25(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 38)
  def _reduce_26(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 39)
  def _reduce_27(val, _values, result)
     result = Mork::MetaTable.new(raw: val[1])
    result
  end
.,.,

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

module_eval(<<'.,.,', 'mork.y', 45)
  def _reduce_32(val, _values, result)
     result = val.flatten.compact
    result
  end
.,.,

module_eval(<<'.,.,', 'mork.y', 46)
  def _reduce_33(val, _values, result)
     result = Mork::Alias.new(key: val[1], value: val[2])
    result
  end
.,.,

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Mork


#
